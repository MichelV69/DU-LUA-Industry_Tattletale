{"slots":{"0":{"name":"Screen1","type":{"events":[],"methods":[]}},"1":{"name":"Industry1","type":{"events":[],"methods":[]}},"2":{"name":"Industry2","type":{"events":[],"methods":[]}},"3":{"name":"Screen2","type":{"events":[],"methods":[]}},"4":{"name":"Industry3","type":{"events":[],"methods":[]}},"5":{"name":"Screen3","type":{"events":[],"methods":[]}},"6":{"name":"Screen4","type":{"events":[],"methods":[]}},"7":{"name":"Industry4","type":{"events":[],"methods":[]}},"8":{"name":"Industry5","type":{"events":[],"methods":[]}},"9":{"name":"Screen5","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--- unit.onStart(1)\nWS2_Software = {}\nWS2_Software.id = \"industry_tattletale\"\nWS2_Software.title = \"Industry Tattletale\"\nWS2_Software.version = \"1.0.9\"\nWS2_Software.revision = \"23 Mar 2023 10h57 AST\"\nWS2_Software.author = \"Michel Vaillancourt <902pe_gaming@wolfstar.ca>\"\n\nsystem.print(\"\\n --------------- \\n\")\nlocal msgTitleAndVersion = WS2_Software.title .. \"\\n\" .. WS2_Software.version\nsystem.print(msgTitleAndVersion)\n\n---\nPrecisionDigits          = 2\nPrecisionValue           = 10 ^ PrecisionDigits\nGramsToKG                = 1000\nMinutes                  = {}\nMinutes[1]               = 60\nMinutes[2]               = Minutes[1] * 2\nMinutes[5]               = Minutes[1] * 5\n\nScreenPulseTable         = {}\nScreenPulseTable[1]      = \"[-=+     ]\"\nScreenPulseTable[2]      = \"[ -=+    ]\"\nScreenPulseTable[3]      = \"[  -=+   ]\"\nScreenPulseTable[4]      = \"[   -=+  ]\"\nScreenPulseTable[5]      = \"[    -=+ ]\"\nScreenPulseTable[6]      = \"[     -=+]\"\nScreenPulseTable[7]      = \"[     -+=]\"\nScreenPulseTable[8]      = \"[     +=-]\"\nScreenPulseTable[9]      = \"[    +=- ]\"\nScreenPulseTable[10]     = \"[   +=-  ]\"\nScreenPulseTable[11]     = \"[  +=-   ]\"\nScreenPulseTable[12]     = \"[ +=-    ]\"\nScreenPulseTable[13]     = \"[+=-     ]\"\nScreenPulseTable[14]     = \"[=+-     ]\"\nScreenPulseTable[15]     = \"[=-+     ]\"\nAnimationPulseIndex      = 1\n\n---\nlocal lclFontName        = \"Montserrat-Light\" --export\nFontName                 = [[\"]] .. lclFontName .. [[\"]]\nFontSize                 = 32 --export\n\n---\nlocal possibleScreens    = { Screen1, Screen2, Screen3, Screen4, Screen5 }\nlocal possibleIndustries = { Industry1, Industry2, Industry3, Industry4, Industry5 }\nScreenList               = {}\nIndustryList             = {}\nIndustryStatusData       = {}\n\nfor i = 1, 5, 1 do\n    if possibleScreens[i] ~= nil then\n        table.insert(ScreenList, possibleScreens[i])\n    end\n    if possibleIndustries[i] ~= nil then\n        table.insert(IndustryList, possibleIndustries[i])\n    end\nend\n\nif #ScreenList == 0 then\n    error \"No Screen units connected.  Cannot continue.\"\nelse\n    system.print(WS2_Software.id .. \": found [\" .. #ScreenList .. \"] connected ScreenUnits.\")\nend\n\nif #IndustryList == 0 then\n    error \"No Industry units connected.  Cannot continue.\"\nelse\n    system.print(WS2_Software.id .. \": found [\" .. #IndustryList .. \"] connected IndustryUnits.\")\nend\n\nfor i = 1, #ScreenList, 1 do\n    ScreenList[i].activate()\n    ScreenList[i].setCenteredText(msgTitleAndVersion .. \"\\n\\n BOOTING\")\nend\n\nIndustryStatusData = UpdateIndustry(IndustryList)\nUpdateScreens(ScreenList, IndustryStatusData)\nunit.setTimer(WS2_Software.id, 0.5)\n--- eof ---\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"--- onTimer(industry_tattletale)\n--- launch every 0.5 seconds\nunit.stopTimer(WS2_Software.id)\nIndustryStatusData = UpdateIndustry(IndustryList)\nUpdateScreens(ScreenList, IndustryStatusData)\nunit.setTimer(WS2_Software.id, 0.5)\n--- eof --- ","filter":{"args":[{"value":"industry_tattletale"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"-- library.onStart(1)\n-- define support functions for use elsewhere\n---\nfunction roundUpToPrecision(valueToRound)\n  if valueToRound == nil then return 0 end\n  local roundedValue = (math.ceil(valueToRound * PrecisionValue) / PrecisionValue)\n  return roundedValue\n  end\n  \n---\nfunction roundDownToPrecision(valueToRound)\n  if valueToRound == nil then return 0 end\n  local roundedValue = (math.floor(valueToRound * PrecisionValue) / PrecisionValue)\n  return roundedValue\n  end\n\n---\nfunction screenPulseTick()\n  AnimationPulseIndex = AnimationPulseIndex + 1\n  if AnimationPulseIndex > #ScreenPulseTable then AnimationPulseIndex = 1 end\n  return ScreenPulseTable[AnimationPulseIndex]\n  end\n  --- eof ---","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"2"},{"code":"-- library.onStart(2)\n-- define key functions for use elsewhere\n---\nfunction UpdateIndustry(table_IndustryList)\n   local lclIndustryStatusData = {}\n\n   for i = 1, #table_IndustryList, 1 do\n      local aRecord = {}\n      if table_IndustryList[i] ~= nil then\n         local status_table          = table_IndustryList[i].getInfo()\n\n         aRecord[\"machineName\"]      = table_IndustryList[i].getName()\n         local product_id            = status_table.currentProducts[1].id\n         aRecord[\"product_name\"]     = AbbreviateName(system.getItem(product_id).locDisplayNameWithSize)\n         aRecord[\"product_iconPath\"] = system.getItem(product_id).iconPath\n         aRecord[\"status_code\"]      = status_table.state\n         aRecord[\"otherComments\"]    = \"---\"\n\n         if aRecord[\"status_code\"] == 1 then\n            aRecord[\"otherComments\"] = status_table.batchesRemaining\n                .. \" batches Remaining\"\n                .. \" of \"\n                .. status_table.batchesRequested\n                .. \" batches Requested.\"\n         end --- if aRecord[\"status_code\"]\n\n         if aRecord[\"status_code\"] == 2 then\n            aRecord[\"otherComments\"] = \"time Remaining on current run: \" .. TimeLeftToHuman(status_table.remainingTime)\n         end --- if aRecord[\"status_code\"]\n\n         if aRecord[\"status_code\"] == 6\n             and status_table.maintainProductAmount > 0\n         then\n            aRecord[\"otherComments\"] = \"maintain Product Amount: \" .. status_table.maintainProductAmount\n         end --- if aRecord[\"status_code\"]\n\n         lclIndustryStatusData[i] = aRecord\n      end --- if machinery\n   end --- for i\n\n   return lclIndustryStatusData\nend --- function\n\n---\nfunction UpdateScreens(lcl_ScreenList, lcl_IndustryStatusData)\n   for i = 1, #lcl_ScreenList, 1 do\n      RenderScreen(\n         lcl_ScreenList[i],\n         lcl_IndustryStatusData[i].machineName,\n         lcl_IndustryStatusData[i].product_name,\n         lcl_IndustryStatusData[i].otherComments,\n         lcl_IndustryStatusData[i].status_code,\n         lcl_IndustryStatusData[i].product_iconPath\n      )\n   end\nend --- function    \n\n---\nfunction TimeLeftToHuman(timeInSeconds)\n   local inPlainEnglish = \"\"\n   local days = math.floor(timeInSeconds / 86400)\n   local hours = math.floor(math.fmod(timeInSeconds, 86400) / 3600)\n   local minutes = math.floor(math.fmod(timeInSeconds, 3600) / 60)\n   local seconds = math.floor(math.fmod(timeInSeconds, 60))\n\n   if days > 0 then\n      inPlainEnglish = inPlainEnglish ..  string.format(\"%dd \", days)\n   end\n   if hours > 0 then\n      inPlainEnglish = inPlainEnglish ..  string.format(\"%02dh \", hours)\n   end\n\n   if minutes > 0 \n   and days == 0 \n   and hours == 0 then\n      inPlainEnglish = inPlainEnglish ..  string.format(\"%02dm \", minutes)\n\n      if minutes < 15 then\n         inPlainEnglish = inPlainEnglish ..  string.format(\"%02ds \", seconds)\n      end\n   end\n\n   return inPlainEnglish\nend\n\n---\nfunction AbbreviateName(long_name_string)\n   return long_name_string:gsub('Uncommon', 'UNC'):gsub('Advanced', 'ADV')\nend\n\n--- eof ---\n\n","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"3"},{"code":"-- library.onStart(3)\n-- define screen layout for use elsewhere\n---\nfunction RenderScreen(currentScreenObj, \n        machineName, productName, otherComments, statusCode, product_iconPath)\n    local ScreenTable = {}\n    local configOptions = {}\n    \n    configOptions[1] = currentScreenObj\n    configOptions[2] = machineName\n    configOptions[3] = productName\n    configOptions[4] = otherComments\n    configOptions[5] = statusCode\n    configOptions[6] = product_iconPath\n    \n                       -- R  G  B\n    local greenText    = '0.5, 1.0, 0.5'\n    local blueText     = '0.5, 0.5, 1.0'\n    local orangeText   = '1.0, 0.5, 0.5'\n    local simpleBlack  = '0.2, 0.2, 0.2'\n    \n    --Parameters (1)\n    ScreenTable[1]=[[\n        local FontName=]] .. FontName ..[[\n        local FontSize=]] .. FontSize ..[[\n        local S_Title=\"]] .. WS2_Software.title ..[[\"\n        local S_Version=\"]] .. WS2_Software.version ..[[\"\n        local S_Revision=\"]] .. WS2_Software.revision ..[[\"\n        local timeStamp=\"]] .. EpochTime() ..[[\" \n        local notDeadYet=\"]] ..screenPulseTick() .. [[\"\n        ]]\n\n    -- general layout(2)\n    ScreenTable[2]=[[\n        --Layers\n        local layers={}\n        layers[\"background\"]  = createLayer()\n        layers[\"shading\"]     = createLayer()\n        layers[\"images\"]      = createLayer()\n        layers[\"footer_text\"] = createLayer()\n        layers[\"header_text\"] = createLayer()\n        layers[\"report_text\"] = createLayer()\n  \n        setBackgroundColor(15/255, 24/255, 29/255)\n        \n        --util functions\n        function tidy(valueToRound)\n            precisionDigits = 2\n            precisionValue  = 10^precisionDigits\n            if valueToRound == nil then return 0 end\n            local roundedValue = (math.floor(valueToRound * precisionValue) / precisionValue)\n            return roundedValue\n            end --- function tidy\n        \n        ---\n        function getRowColsPosition(layout, col, row)\n            if col > layout.cols_wide then col = layout.cols_wide end\n            x_pos = (layout.col_width * col) + layout.margin_left\n            if row > layout.rows_high then row = layout.rows_high end\n            y_pos = (layout.row_height * row) + layout.margin_top\n            return {x_pos = x_pos, y_pos = y_pos}\n            end --- function getRowColsPosition\n    \n        ---\n        function getStatusCodeWord(statusCode)\n            local statusCodeTable = {}\n            statusCodeTable[1] = {state=\"Stopped\"}\n            statusCodeTable[2] = {state=\"Pending\"}\n            statusCodeTable[3] = {state=\"Jammed\"}\n            statusCodeTable[4] = {state=\"Storage Full\"}\n            statusCodeTable[5] = {state=\"No Output\"}\n            statusCodeTable[6] = {state=\"Running\"}\n            statusCodeTable[7] = {state=\"No Schemas\"}\n            return statusCodeTable[statusCode].state\n            end  --- function getStatusCodeWord\n    \n        ---\n        function drawStatusBorder(statusCode, layers, layout)\n            -- draw two boxes, one inside the other\n            rounding_px = 9\n\n            -- status color\n            stillNeedDefault = true\n    \n            if tonumber(statusCode) == 2 \n              or tonumber(statusCode) == 6 then\n                setDefaultFillColor(layers[\"shading\"], Shape_BoxRounded, 0, 1, 0, 1)\n                stillNeedDefault = false\n                end\n            if tonumber(statusCode) == 3 \n               or tonumber(statusCode) == 4  \n               or tonumber(statusCode) == 5\n               or tonumber(statusCode) == 7 then\n                setDefaultFillColor(layers[\"shading\"], Shape_BoxRounded, 1, 0, 0, 1) \n                stillNeedDefault = false\n                end\n\n            if stillNeedDefault then\n                setDefaultFillColor(layers[\"shading\"], Shape_BoxRounded, 0.2, 0.2, 0.0, 1)\n                end\n    \n            topLeftCorner_X = layout.col_width\n            topLeftCorner_Y = layout.row_height\n            boxWidth_px   = (layout.cols_wide - 2) * layout.col_width\n            boxHeight_px  = (layout.rows_high - 2) * layout.row_height\n    \n            addBoxRounded(layers[\"shading\"], \n                topLeftCorner_X, topLeftCorner_Y, \n                boxWidth_px, boxHeight_px, \n                rounding_px) \n    \n            -- smaller \"write inside\"\n            setDefaultFillColor(layers[\"shading\"], Shape_BoxRounded, 0.2, 0.2, 0.2, 1)\n\n            topLeftCorner_X = layout.col_width * 2\n            topLeftCorner_Y = layout.row_height * 2\n            boxWidth_px   = (layout.cols_wide - 4) * layout.col_width\n            boxHeight_px  = (layout.rows_high - 4) * layout.row_height\n    \n            addBoxRounded(layers[\"shading\"], \n                topLeftCorner_X, topLeftCorner_Y, \n                boxWidth_px, boxHeight_px, \n                rounding_px) \n    \n            end  --- function drawStatusBorder\n    \n        --Scr Resolution\n        local rx, ry= getResolution()\n        local layout = {}\n        layout.cols_wide = tidy(rx/(FontSize*1.2))\n        layout.col_width = tidy(rx/layout.cols_wide)\n        \n        layout.rows_high = tidy(ry/(FontSize*1.2))\n        layout.row_height = tidy(ry/layout.rows_high)\n        \n        layout.margin_top = tidy((ry * 0.1) / 2)\n        layout.margin_bottom = layout.margin_top\n        layout.margin_left = tidy((rx * 0.1) / 2)\n        layout.margin_right = layout.margin_left\n    \n        layout.square_size = 128\n        \n        --Font Setups\n        local offsetStepPX = 24\n        local fontSizeStep = 0.33\n        local FontText=loadFont(FontName , FontSize)\n        local FontTextSmaller=loadFont(FontName , FontSize * (1 - fontSizeStep))\n        local FontTextBigger=loadFont(FontName , FontSize * (1 + fontSizeStep))\n\n        local shadowPX = 4\n        setDefaultShadow(layers[\"header_text\"], Shape_Text, shadowPX/2, ]] .. blueText ..[[, 1)\n        setDefaultShadow(layers[\"report_text\"], Shape_Text, shadowPX, ]] .. blueText ..[[, 1)\n        setDefaultShadow(layers[\"footer_text\"], Shape_Text, shadowPX/2, ]] .. greenText ..[[, 1)\n        setDefaultShadow(layers[\"images\"], Shape_Image, shadowPX*2, ]] .. simpleBlack ..[[, 1)\n    ]]\n\n    --get data to publish (3)\n    ScreenTable[3]=[[\n    \n        local this_machineName = ']] .. configOptions[2] .. [['\n        local this_productName = ']] .. configOptions[3] .. [['\n        local this_productIcon_URL = ']] .. configOptions[6] .. [['\n        local this_otherComments = ']] .. configOptions[4] .. [['\n        local this_statusCode = getStatusCodeWord(]] .. configOptions[5] .. [[)\n\n    ]]\n    \n    -- header and footer (4)\n    ScreenTable[4]=[[\n      local vpos = 1\n      publish_to = getRowColsPosition(layout, 1, vpos)\n      textMessage = S_Title .. \" v\" .. S_Version .. \" (\" .. S_Revision .. \")\"\n      addText(layers[\"header_text\"], FontTextSmaller, textMessage, publish_to.x_pos, publish_to.y_pos)\n\n      col = tidy(layout.cols_wide/3) - 1.5\n      row = layout.rows_high - 3\n\n      publish_to = getRowColsPosition(layout, col, row)\n      textMessage = \"screen last updated: [\"..timeStamp..\"]\"\n      addText(layers[\"footer_text\"], FontTextSmaller, textMessage, publish_to.x_pos, publish_to.y_pos)\n    ]]\n\n    --- format data for display\n    ScreenTable[5]=[[ \n            local productIcon = loadImage(this_productIcon_URL)\n            addImage(layers[\"images\"], productIcon, layout.margin_left, layout.margin_top, layout.margin_left + layout.square_size , layout.margin_top + layout.square_size )        \n    \n            eightCols = tidy(layout.cols_wide/8)\n            row = layout.rows_high /3\n\n            publish_to = getRowColsPosition(layout, eightCols, row)\n            textMessage = this_machineName   \n            addText(layers[\"report_text\"], FontTextBigger, textMessage, publish_to.x_pos, publish_to.y_pos)\n   \n            horiz_offset = 1\n            vert_offset = 2\n            publish_to = getRowColsPosition(layout, eightCols * horiz_offset, row + vert_offset)\n\n            textMessage = this_statusCode\n            addText(layers[\"report_text\"], FontTextBigger, textMessage, publish_to.x_pos, publish_to.y_pos)\n    \n            horiz_offset = 2\n            vert_offset = 3\n            publish_to = getRowColsPosition(layout, eightCols * horiz_offset, row + vert_offset)\n            textMessage = this_productName\n            addText(layers[\"report_text\"], FontText, textMessage, publish_to.x_pos, publish_to.y_pos)\n\n            horiz_offset = 2\n            vert_offset = 4\n            publish_to = getRowColsPosition(layout, eightCols * horiz_offset, row + vert_offset)\n            textMessage = this_otherComments\n            addText(layers[\"report_text\"], FontText, textMessage, publish_to.x_pos, publish_to.y_pos)\n\n            ]]\n\n    --- tick-timer, etc (6)\n    ScreenTable[6]=[[\n      col = tidy(layout.cols_wide/3)\n      row = layout.rows_high - 4\n      publish_to = getRowColsPosition(layout, col, row)\n      textMessage = notDeadYet\n      addText(layers[\"report_text\"], FontText, textMessage, publish_to.x_pos, publish_to.y_pos)  \n    \n      drawStatusBorder(]] .. configOptions[5] .. [[, layers, layout)\n      ]]\n\n    --Animation (7)\n    ScreenTable[7]=[[\n        requestAnimationFrame(5)\n        ]]\n\n    --RENDER\n    function ScreenRender(configOptions)\n        local screenTemplate = table.concat(ScreenTable)\n        configOptions[1].setRenderScript(screenTemplate)\n        end -- function ScreenRender\n    \n    ScreenRender(configOptions)\n    end -- function renderScreen\n---\n--- eof ---\n","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"4"},{"code":"-- library.onStart(4)\n--[[ TimeScript by Jericho (github.com/Jericho1060) ]]\n--[[ snagged from LocuraDU (https://github.com/LocuraDU) ]]\nfunction EpochTime()\n    local t = system.getUtcTime()\n     if not utc then t = t + system.getUtcOffset() end\n     local DSEC=24*60*60\n     local YSEC=365*DSEC\n     local LSEC=YSEC+DSEC\n     local FSEC=4*YSEC+DSEC\n     local BASE_DOW=4\n     local BASE_YEAR=1970\n     local _days={-1, 30, 58, 89, 119, 150, 180, 211, 242, 272, 303, 333, 364}\n     local _lpdays={}\n     for i=1,2  do _lpdays[i]=_days[i]   end\n     for i=3,13 do _lpdays[i]=_days[i]+1 end\n     local y,j,m,d,w,h,n,s\n     local mdays=_days\n     s=t\n     y=math.floor(s/FSEC)\n     s=s-y*FSEC\n     y=y*4+BASE_YEAR\n     if s>=YSEC then\n         y=y+1\n         s=s-YSEC\n         if s>=YSEC then\n             y=y+1\n             s=s-YSEC\n             if s>=LSEC then\n                 y=y+1\n                 s=s-LSEC\n             else\n                 mdays=_lpdays\n             end\n         end\n     end\n     j=math.floor(s/DSEC)\n     s=s-j*DSEC\n     local m=1\n     while mdays[m]<j do m=m+1 end\n     m=m-1\n     local d=j-mdays[m]\n     w=(math.floor(t/DSEC)+BASE_DOW)%7\n     if w == 0 then w = 7 end\n     h=math.floor(s/3600)\n     s=s-h*3600\n     n=math.floor(s/60)\n     function round(a,b)if b then return utils.round(a/b)*b end;return a>=0 and math.floor(a+0.5)or math.ceil(a-0.5)end\n     s=round(s-n*60)\n     local weekDaysNames = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"}\n     local weekDaysShortNames = {\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"}\n     local monthNames = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"}\n     local monthShortNames = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}\n\n     return string.format(\"%02d : %02d : %02d \",h,n,s) .. weekDaysShortNames[w]..\" / \".. monthShortNames[m]..\" / \".. d ..\" / \".. y\n\n end\n---\n--- eof ---","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"5"}],"methods":[],"events":[]}